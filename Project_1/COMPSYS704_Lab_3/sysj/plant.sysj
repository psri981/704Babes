import run.GUI;
import run.POS_GUI;
import run.ECS_GUI;
import run.ACS_GUI;

Plant(
		input signal capOnBottleAtPos1, tableAlignedWithSensor, bottleAtPos1, bottleAtPos2, bottleAtPos3, bottleAtPos4, bottleAtPos5;
		input signal rotate;
		input String channel liquidMixOutput;
		input int channel bottleQuantityOutput;
		output signal capOnPos1, tableAligned, botPos1, botPos2, botPos3, botPos4, botPos5;
		output signal conBeltTriggerE, fillerTriggerE, lidloaderTriggerE, capScrewTriggerE, labelTriggerE;
		output Boolean channel orderDoneFlag;
		)
->
{
	new Thread(new GUI()).start();

	{// 
		
		while(true){
			
	
			
			// Get number of bottles ordered
			Integer bottles = 0;
			receive bottleQuantityOutput;
			bottles = (Integer)#bottleQuantityOutput;
			System.out.println("Bottle Quantity: " + bottles);
			receive liquidMixOutput;
			String liquidMix = "";
			liquidMix = (String)#liquidMixOutput;
			System.out.println("Liquid Mix: " + liquidMix);
			
			Integer bottlesDone = 0;	
			///BACKBONE OF MULTIPLE BOTTLES LOGIC/// (needs a little more thought)
//			if (bottles < 5) { // if there are less than 5 bottles show them one at a time to start
//				if (bottles == 4) {
//					emit botPos1;
//					await(rotate);
//					emit botPos2;
//					await(rotate);
//					emit botPos3;
//					await(rotate);
//					emit botPos4(rotate);
//					await(rotate);
//				}
//				else if (bottles == 3) {
//					emit botPos1;
//					await(rotate);
//					emit botPos2;
//					await(rotate);
//					emit botPos3;
//					await(rotate);
//				}
//				else if (bottles == 2) {
//					emit botPos1;
//					await(rotate);
//					emit botPos2;
//					await(rotate);
//				}
//				else if (bottles == 1) {
//					emit botPos1;
//					await(rotate);
//				}
//			}
//			
//			else if(bottles > 4) {
//				int multiples = (bottles-4)/5;
//				int rem = (bottles-4)%5;
//				
//				emit botPos1; // show first four
//				await(rotate);
//				emit botPos2;
//				await(rotate);
//				emit botPos3;
//				await(rotate);
//				emit botPos4(rotate);
//				await(rotate);
//				
//				for(int i = 0 ; i < multiples; i++) {
//					emit botPos1;
//					emit botPos2;
//					emit botPos3;
//					emit botPos4;
//					emit botPos5;
//					await(rotate);
//				}
//				
//				if (rem == 4) {
//					emit botPos1;
//					await(rotate);
//					emit botPos2;
//					await(rotate);
//					emit botPos3;
//					await(rotate);
//					emit botPos4(rotate);
//					await(rotate);
//				}
//				else if (rem == 3) {
//					emit botPos1;
//					await(rotate);
//					emit botPos2;
//					await(rotate);
//					emit botPos3;
//					await(rotate);
//				}
//				else if (rem == 2) {
//					emit botPos1;
//					await(rotate);
//					emit botPos2;
//					await(rotate);
//				}
//				else if (rem == 1) {
//					emit botPos1;
//					await(rotate);
//				}
//			}
//			
//		emit botPos4; // show last four leaving
//		await(rotate);
//		emit botPos3;
//		await(rotate);
//		emit botPos2;
//		await(rotate);
//		emit botPos1(rotate);
//		await(rotate);
			
			
			
			while(bottlesDone != bottles){	
				abort(rotate){
					while(true) {
						emit botPos1;
						emit tableAligned;
						pause;
					}
				}
				
				await(!rotate);
				
				abort(bottleAtPos1 && rotate){
					while(true) {
						//System.out.println("bottleAtPos1 aborted");
						emit botPos2;
						pause;
					}
				}
			
				await(!rotate);

				abort(bottleAtPos2 && rotate){
					while(true) {
						emit botPos3;
						pause;
					}
				}
					await(!rotate);
	
				abort(bottleAtPos3 && rotate){
					while(true) {
						emit botPos4;
						pause;
					}
				}
					await(!rotate);
	
				abort(bottleAtPos4 && rotate){
					while(true) {
						emit botPos5;
						pause;
					}
				}
				await(!rotate);
	
				abort(bottleAtPos5 && rotate){
					emit tableAligned;
					bottlesDone++;
					System.out.println(bottlesDone);
					System.out.println("Bottle Loc: To Labelling");
				}
				
			pause; 
			}
			pause;
		}
	}
	||
	{// To viz
		{while(true){present(botPos1){emit conBeltTriggerE;} pause;}}
		||
		{while(true){present(botPos2){emit fillerTriggerE;} pause;}}
		||
		{while(true){present(botPos3){emit lidloaderTriggerE;} pause;}}
		||
		{while(true){present(botPos4){emit capScrewTriggerE;} pause;}}
		||
		{while(true){present(botPos5){emit labelTriggerE;} pause;}}
	}
	
}


POS_Plant(
		input signal orderStart;
		input Boolean channel orderDoneFlag;
		
		input String signal liquidMix;
		input Integer signal bottleQuantity;
		
		output signal orderDoneGUIFlag;
		output String channel liquidMixOutput;
		output int channel bottleQuantityOutput;
		
		)
->
{
	new Thread(new POS_GUI()).start();

	{// 
		while(true){
			present(orderStart){
				Integer y;
				String x; 
				
				y = #bottleQuantity;
				x = #liquidMix; 
				
				send bottleQuantityOutput( y);
				
				send liquidMixOutput(x);
				
				}
			pause;
		}
	}	
	||
	{// To viz
	}
	
}



ECS_plant(
		input Integer signal tempZone1_7, tempZone2_3, tempZone4_5_6;
		input Integer signal humidZone1_7, humidZone2_3, humidZone4_5_6;
		input Integer signal lightInt;
		input Integer signal selectedZone;
		input Integer signal fire;
		
		input String signal time;
		
		input signal humanZ1, humanZ2, humanZ3, humanZ4, humanZ5, humanZ6, humanZ7;
		input signal dust, powerOff, roomCleaned, alarmOff, safeOpTemp, safeOpHumid;
		input signal run;

		output signal fireZone1, fireZone2, fireZone3, fireZone4, fireZone5, fireZone6, fireZone7;
		output signal cleanZone1, cleanZone2, cleanZone3, cleanZone4, cleanZone5, cleanZone6, cleanZone7;
		output signal fanOnZone1_7, heatOnZone1_7, airOnZone2_3, airOnZone4_5_6, heatOnZone2_3, heatOnZone4_5_6;
		output signal blindsDownZone1_7, blindsDownZone2_3, blindsDownZone4_5_6;  
		output signal humOnZone1_7, humOnZone2_3, humOnZone4_5_6, deHumOnZone1_7, deHumOnZone2_3, deHumOnZone4_5_6;
		output signal cutPow;
		output signal pow, fireExt;
		
		output signal alarmZone1TriggerE, alarmZone2TriggerE, alarmZone3TriggerE, alarmZone4TriggerE, alarmZone5TriggerE, alarmZone6TriggerE, alarmZone7TriggerE;
		output signal cleanZone1TriggerE, cleanZone2TriggerE, cleanZone3TriggerE, cleanZone4TriggerE, cleanZone5TriggerE, cleanZone6TriggerE, cleanZone7TriggerE;
		output signal fanOnZone1_7TriggerE, heatOnZone1_7TriggerE, airOnZone2_3TriggerE, airOnZone4_5_6TriggerE, heatOnZone2_3TriggerE, heatOnZone4_5_6TriggerE;
		output signal humOnZone1_7TriggerE, humOnZone2_3TriggerE, humOnZone4_5_6TriggerE, deHumOnZone1_7TriggerE, deHumOnZone2_3TriggerE, deHumOnZone4_5_6TriggerE;
		output signal cutPow_TriggerE, fireExtE;
		output signal lightIntZ1Trigger, lightIntZ2Trigger, lightIntZ3Trigger, lightIntZ4Trigger, lightIntZ5Trigger, lightIntZ6Trigger, lightIntZ7Trigger;
		)
->
{
	new Thread(new ECS_GUI()).start();

	{// 
		while(true){
				
			
			// WAIT FOR USER TO START SIMULATION
			present(run){
				
				// Check what zone was selected when run was pressed
				Integer zone = 0;
				zone = #selectedZone;
				
				System.out.println("");
				System.out.println("Plant knows zone selected is: " + zone);
				
				// Check what zone was selected when run was pressed
				Integer firePresent = 0;
				firePresent = #fire;
				
				// Check light intensity
				Integer lightIntensity = 0;
				lightIntensity = #lightInt;
				
				// Check the time
				String clock = "";
				clock = #time;
				
				// CHECK FOR FIREEEEEE (MOST IMPORTANT)
				// SINCE SMOKE ALARM IS BATTERY OPERATED, POWER SHOULD BE SWITCHED OFF IN EVENT OF FIRE
				if(firePresent == 1){
					System.out.println("THERE IS A FIRE IN ZONE " + zone + " SEND EVACUATION SIGNAL TO ACS");
					emit cutPow;
					await(powerOff);
					waitl(2s);
					System.out.println("Power turned off");
					emit fireZone1;
					await(alarmOff);
					waitl(4s);
					System.out.println("Alarm off, Fire out");
					//emit fireExt;	
				}
				
				
				//emit fireExt;	
				// CHECK TEMPERATURES FOR ZONES 1 & 7
				if(zone == 1 || zone == 7){
					Integer temp17 = 0;
					temp17 = #tempZone1_7;
					if(temp17 > 22){
							System.out.println("");
							System.out.println("Room temperature is too high at " + temp17);
							emit fanOnZone1_7;
					} else if(temp17 < 21){
							System.out.println("Room temperature is too low at " + temp17);
							emit heatOnZone1_7;
					} else {
						System.out.println("");
						System.out.println("Room temperature is safe at" + temp17);
					}	
				}
				
				// CHECK TEMPERATURES FOR ZONES 2 & 3
				if(zone == 2 || zone == 3){
					Integer temp23 = 0;
					temp23 = #tempZone2_3;
					if(temp23 > 22){
							System.out.println("");
							System.out.println("Room temperature is too high at " + temp23);
							emit airOnZone2_3;
					} else if(temp23 < 21){
							emit heatOnZone2_3;
					} else {
						System.out.println("");
						System.out.println("Room temperature is safe at" + temp23);
					}	
				}
				
					
				// CHECK TEMPERATURE FOR ZONES 4 & 5 & 6
				if(zone == 4 || zone == 5 || zone == 6){
					Integer temp456 = 0;
					temp456 = #tempZone4_5_6;
					if(temp456 > 22){
							System.out.println("");
							System.out.println("Room temperature is too high at " + temp456);
							emit airOnZone4_5_6;
					} else if(temp456 < 21){
							System.out.println("");
							System.out.println("Room temperature is too low at " + temp456);
							emit heatOnZone4_5_6;
					} else {
						System.out.println("");
						System.out.println("Room temperature is safe at" + temp456);
					}	
				}
					
			}
			pause;
		}
	}
	||
	{// To viz
		{while(true){present(fireZone1){emit alarmZone1TriggerE;} pause;}}
		||
		{while(true){present(fireExt){emit fireExtE;} pause;}}
		||
		{while(true){present(cleanZone1){emit cleanZone1TriggerE;} pause;}}
		||
		{while(true){present(cleanZone2){emit cleanZone2TriggerE;} pause;}}
		||
		{while(true){present(cleanZone3){emit cleanZone3TriggerE;} pause;}}
		||
		{while(true){present(cleanZone4){emit cleanZone4TriggerE;} pause;}}
		||
		{while(true){present(cleanZone5){emit cleanZone5TriggerE;} pause;}}
		||
		{while(true){present(cleanZone6){emit cleanZone6TriggerE;} pause;}}
		||
		{while(true){present(cleanZone7){emit cleanZone7TriggerE;} pause;}}
		||
		{while(true){present(fanOnZone1_7){emit fanOnZone1_7TriggerE;} pause;}}
		||
		{while(true){present(heatOnZone1_7){emit heatOnZone1_7TriggerE;} pause;}}
		||
		{while(true){present(airOnZone2_3){emit airOnZone2_3TriggerE;} pause;}}
		||
		{while(true){present(airOnZone4_5_6){emit airOnZone4_5_6TriggerE;} pause;}}
		||
		{while(true){present(heatOnZone2_3){emit heatOnZone2_3TriggerE;} pause;}}
		||
		{while(true){present(heatOnZone4_5_6){emit heatOnZone4_5_6TriggerE;} pause;}}
		||
		{while(true){present(humOnZone1_7){emit humOnZone1_7TriggerE;} pause;}}
		||
		{while(true){present(humOnZone2_3){emit humOnZone2_3TriggerE;} pause;}}
		||
		{while(true){present(humOnZone4_5_6){emit humOnZone4_5_6TriggerE;} pause;}}
		||
		{while(true){present(deHumOnZone1_7){emit deHumOnZone1_7TriggerE;} pause;}}
		||
		{while(true){present(deHumOnZone2_3){emit deHumOnZone2_3TriggerE;} pause;}}
		||
		{while(true){present(deHumOnZone4_5_6){emit deHumOnZone4_5_6TriggerE;} pause;}}
		||
		{while(true){present(cutPow){emit cutPow_TriggerE;} pause;}}
	}
}

ACS_Plant(
		input signal fire, accessManu, accessOffice, enable, absResume, absSuspend, proxLaser, unlock1, unlock2, unlock3, zoneOcc0, zoneOcc1, zoneOcc2, zoneOcc3, zoneOcc4, zoneOcc5, zoneOcc6, zoneOcc7;
		output signal zoneOcc0GUI, zoneOcc1GUI, zoneOcc2GUI, zoneOcc3GUI, zoneOcc4GUI, zoneOcc5GUI, zoneOcc6GUI, zoneOcc7GUI, accessOfficeGUI, accessManuGUI, lock1GUI, laserProximity, firePresent, door1req, door2req, door3req, manuPerm, officePerm, zoneOcc0_t, zoneOcc1_t, zoneOcc2_t, zoneOcc3_t, zoneOcc4_t, zoneOcc5_t, zoneOcc6_t, zoneOcc7_t;
		output Integer signal person1accessOffice, person1accessManu, person1zone, person1doorreq, person2zone, person2doorreq, person3zone, person3doorreq, person4zone, person4doorreq;
		output signal accessManu_t, accessOffice_t, unlock1GUI, unlock2GUI, unlock3GUI, fire_t, unlock1_t, proxLaserGUI, absStopGUI;
		)
->
{
	new Thread(new ACS_GUI()).start();

	{
		
		abort(fire){
			while(true){
				{
					await(accessOffice);
					abort(accessManu){
						while(true) {
							{
								emit accessOffice_t;
								pause;
							}
							||
							{
								await(zoneOcc0);
								emit zoneOcc0_t;
							}
							||
							{
								await(zoneOcc1);
								emit zoneOcc1_t;
							}
							||
							{
								await(zoneOcc7);
								emit zoneOcc7_t;
							}
						}
					}
					pause;
				}
				||
				{
					await(accessManu);
					abort(accessOffice){
						while(true){
							{
								emit accessManu_t;
								pause;
							}
							||
							{
								await(zoneOcc0);
								emit zoneOcc0_t;
							}
							||
							{
								await(zoneOcc2);
								emit zoneOcc2_t;
							}
							||
							{
								await(zoneOcc3);
								emit zoneOcc3_t;
							}
							||
							{
								await(zoneOcc4);
								emit zoneOcc4_t;
							}
							||
							{
								await(zoneOcc5);
								emit zoneOcc5_t;
							}
							||
							{
								await(zoneOcc6);
								emit zoneOcc6_t;
							}
						}
					}
					pause;
				}
			}
			
			emit fire_t;
		}

	}
	||
	{//to Viz
		{while(true) {present(unlock1_t){ emit unlock1GUI;} pause;}}
		||
		{while(true) {present(accessOffice_t){ emit accessOfficeGUI;} pause;}}
		||
		{while(true) {present(accessManu_t){emit accessManuGUI;} pause;}}
		||
		{while(true) {present(zoneOcc0_t){emit zoneOcc0GUI;} pause;}}
		||
		{while(true) {present(zoneOcc1_t){emit zoneOcc1GUI;} pause;}}
		||
		{while(true) {present(zoneOcc2_t){emit zoneOcc2GUI;} pause;}}
		||
		{while(true) {present(zoneOcc3_t){emit zoneOcc3GUI;} pause;}}
		||
		{while(true) {present(zoneOcc4_t){emit zoneOcc4GUI; emit proxLaserGUI; emit absStopGUI;} pause;}}
		||
		{while(true) {present(zoneOcc5_t){emit zoneOcc5GUI; emit proxLaserGUI; emit absStopGUI;} pause;}}
		||
		{while(true) {present(zoneOcc6_t){emit zoneOcc6GUI; emit proxLaserGUI; emit absStopGUI;} pause;}}
		||
		{while(true) {present(zoneOcc7_t){emit zoneOcc7GUI;} pause;}}
		||
		{while(true) {present(fire){emit unlock1GUI; emit unlock2GUI; emit unlock3GUI;} pause;}}
	}
}
