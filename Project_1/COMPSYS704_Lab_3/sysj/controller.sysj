Controller(
		input signal capOnPos1,tableAligned,botPos1,botPos2,botPos3,botPos4,botPos5;
		//        output signal rotaryTableTrigger;
		output signal bottleAtPos1, bottleAtPos2, bottleAtPos3, bottleAtPos4, bottleAtPos5;
		)
->{
	/* TODO: Write control-logic */
	while(true) {
	
		abort(tableAligned){
			emit bottleAtPos1;
		}

		abort(botPos2){
			emit bottleAtPos2;
		}

		abort(botPos3){
			emit bottleAtPos3;
		}

		abort(botPos4){
			emit bottleAtPos4;
		}

		abort(botPos5){
			emit bottleAtPos5;
		}
		pause;
	}
}
POS_Controller(
		input signal orderDone;
		input signal liquidMixOutput;
		input signal bottleQuantityOutput;
		
		output signal orderDoneFlag; 
				
		)
->{
	/* TODO: Write control-logic */
	while(true) {
	
		present(orderDone){
			emit orderDoneFlag;
			System.out.println("Order is completed");
		}

		pause;
	}
}

ECS_controller(
		input signal fireZone1, fireZone2, fireZone3, fireZone4, fireZone5, fireZone6, fireZone7;
		input signal cleanZone1, cleanZone2, cleanZone3, cleanZone4, cleanZone5, cleanZone6, cleanZone7;
		input signal fanOnZone1_7, heatOnZone1_7, airOnZone2_3, airOnZone4_5_6, heatOnZone2_3, heatOnZone4_5_6;
		//input signal blindsDownZone1_7, blindsDownZone2_3, blindsDownZone4_5_6;  
		input signal humOnZone1_7, humOnZone2_3, humOnZone4_5_6, deHumOnZone1_7, deHumOnZone2_3, deHumOnZone4_5_6;
		input signal cutPow;
		input signal pow;
		
		output signal safeOpTemp, safeOpHumid;
		output signal powerOff, roomCleaned, fireOut, alarmOff, blindsDown, evacuated;
		)
->{
	/* TODO: Write control-logic */
	while(true) {
		
		// CHECK FOR POWER CUTS
		present(cutPow){
			System.out.println("");
			System.out.println("Fire detected all power has been cut, please wait...");
			emit powerOff;
		}	
	
		// CHECK FOR FIRE
		present( fireZone1){
			System.out.println("");
			System.out.println("Smoke alarm activated please wait for fire to be extinguished...");
			emit alarmOff;
		}

		// CHECK FOR CLEANLINESS
		present(cleanZone1 || cleanZone2 || cleanZone3 || cleanZone4 || cleanZone5 || cleanZone6 || cleanZone7){
			System.out.println("");
			System.out.println("High levels of dust detected please wait for room to be cleaned...");
			emit roomCleaned;
		}
		
		// CHECK FOR TEMPERATURE
		present(fanOnZone1_7 || heatOnZone1_7 || airOnZone2_3 || airOnZone4_5_6 || heatOnZone2_3 || heatOnZone4_5_6){
			System.out.println("");
			System.out.println("Room temperature is not optimal, please wait for it to moderate...");
			emit safeOpTemp;
		}
		
		// CHECK FOR HUMIDITY CHANGES
		present(humOnZone1_7 || humOnZone2_3 || humOnZone4_5_6 || deHumOnZone1_7 || deHumOnZone2_3 || deHumOnZone4_5_6){
			System.out.println("");
			System.out.println("Room humidity is not optimal, please wait for it to moderate...");
			emit safeOpHumid;
		}
		
		pause;
	}
}

ACS_Controller(
    input signal unlock1_t, lock1, laserProximity, firePresent, door1req, door2req, door3req, manuPerm, officePerm, zoneOcc0, zoneOcc1, zoneOcc2, zoneOcc3, zoneOcc4, zoneOcc5, zoneOcc6, zoneOcc7;
    input Integer signal person1accessOffice, person1accessManu, person1zone, person1doorreq, person2zone, person2doorreq, person3zone, person3doorreq, person4zone, person4doorreq;
    output signal absResume, absSuspend, proxLaser, unlock1, unlock2, unlock3;
)
-> {
	//MAKING FAKE PEOPLE DONT MIND ME
	
	// Declare a 2D integer array with 3 rows and 4 columns
	int[][] personArray = new int[4][4];

	// Initialize the elements of the 2D array
	personArray[0][0] = 0; //ID Number
	personArray[0][1] = 3; //Permission: 0 = office, 1= manu
	personArray[0][2] = 0; //Current Zone
	personArray[0][3] = 0; //Door req number 0 for no door

//	personArray[1][0] = 1;
//	personArray[1][1] = 0;
//	personArray[1][2] = 1;
//	personArray[1][3] = 0;
//
//	personArray[2][0] = 2;
//	personArray[2][1] = 1;
//	personArray[2][2] = 4;
//	personArray[2][3] = 0;
//	
//	personArray[3][0] = 3;
//	personArray[3][1] = 1;
//	personArray[3][2] = 4;
//	personArray[3][3] = 0;

	//ACTUAL CODE
	await (person1accessOffice || person1accessManu);
	present(person1accessOffice){
		personArray[0][1] = 0;
		pause;
	}
	present(person1accessManu){
		personArray[0][1] = 1;
		pause;
	}
	
	while(true) {
		System.out.println(personArray[0][2]);
		
		abort(person1accessManu) { //if they have office access
				abort(person1accessManu){ //stop once permission changes
					personArray[0][1] = 0; //log in array
					while(true) {
						emit unlock1;
						present(zoneOcc0){
							personArray[0][2] = 0;
							//System.out.println(personArray[0][2]);
						}
						present(zoneOcc1){
							personArray[0][2] = 1;
							//System.out.println(personArray[0][2]);
						}
						present(zoneOcc7){
							personArray[0][2] = 7;
							//System.out.println(personArray[0][2]);
						}
						pause;
					}
				}
				personArray[0][1] = 1;
			}
			pause;

		abort(person1accessOffice) { //if they have manu access
			System.out.println(personArray[0][1]);
				abort(person1accessOffice){
					personArray[0][1] = 1;
					while(true) {
						emit unlock3;
						present(zoneOcc0){
							personArray[0][2] = 0;
							//System.out.println(personArray[0][2]);
						}
						present(zoneOcc2){
							personArray[0][2] = 2;
							//System.out.println(personArray[0][2]);
						}
						present(zoneOcc3){
							personArray[0][2] = 3;
							//System.out.println(personArray[0][2]);
						}
						present(zoneOcc4){
							personArray[0][2] = 4;
							emit absSuspend;
							//System.out.println(personArray[0][2]);
						}
						present(zoneOcc5){
							personArray[0][2] = 5;
							emit absSuspend;
							//System.out.println(personArray[0][2]);
						}
						present(zoneOcc6){
							personArray[0][2] = 6;
							emit absSuspend;
							//System.out.println(personArray[0][2]);
						}
						pause;
					}
				}
				personArray[0][1] = 0;
			}
		}
		pause;
	}
